package main

import (
	"fmt"
	"strconv"
	"strings"
	"unicode"
)

func main() {
	part1(RawInput)
}

func part1(input string) {
	sum := 0
	for _, line := range strings.Split(input, "\n") {
		p := newParser(line)

		expr := p.parseExpression()
		sum += expr.evaluate()
	}

	fmt.Println(sum)
}

// *** PARSER
type parser struct {
	tokenizer *tokenizer
}

func newParser(input string) *parser {
	t := newTokenizer(input)
	return &parser{t}
}

func (parser *parser) parseExpression() expr {

	t := parser.tokenizer

	expr := parseBinary(t)

	if t.token.tokenType != eofToken {
		panic("Unexpected character at end of expression")
	}

	return expr
}

func parseLeaf(t *tokenizer) expr {
	if t.token.tokenType == numberToken {
		e := numberExpr{t.token.number}
		t.nextToken()
		return e
	} else if t.token.tokenType == openParen {
		t.nextToken()
		e := parseBinary(t)
		return e
	}

	panic(fmt.Sprintf("Unexpected token %v", t.token))
}

var (
	add      = func(left, right int) int { return left + right }
	multiply = func(left, right int) int { return left * right }
)

func parseBinary(t *tokenizer) expr {
	lhs := parseLeaf(t)

	for true {
		var op func(left, right int) int
		if t.token.tokenType == addToken {
			op = add
		} else if t.token.tokenType == multiplyToken {
			op = multiply
		} else if t.token.tokenType == closeParen {
			t.nextToken()
			return lhs
		} else if t.token.tokenType == eofToken {
			return lhs
		}

		t.nextToken()

		rhs := parseLeaf(t)
		if rhs == nil {
			return lhs
		}

		lhs = binaryExpr{lhs, rhs, op}
	}
	return nil
}

//** EXPRESSIONS
type expr interface {
	evaluate() int
}

type binaryExpr struct {
	left  expr
	right expr
	op    func(left, right int) int
}

func (bin binaryExpr) evaluate() int {
	return bin.op(bin.left.evaluate(), bin.right.evaluate())
}

type numberExpr struct {
	val int
}

func (num numberExpr) evaluate() int {
	return num.val
}

type parensExpr struct {
	expr expr
}

func (par parensExpr) evaluate() int {
	return par.expr.evaluate()
}

// *** TOKENIZER
type tokenType int

const (
	eofToken tokenType = iota
	addToken
	multiplyToken
	numberToken
	openParen
	closeParen
)

func (t tokenType) String() string {
	return [...]string{"EOF", "Add", "Multiply", "Number", "Open", "Close"}[t]
}

type token struct {
	tokenType tokenType
	number    int
}

func (t token) String() string {
	if t.tokenType == numberToken {
		return fmt.Sprintf("%s (%d)", t.tokenType, t.number)
	}
	return t.tokenType.String()
}

type tokenizer struct {
	data *strings.Reader

	currentChar rune
	token       token
}

func newTokenizer(input string) *tokenizer {
	t := &tokenizer{strings.NewReader(input + "\000"), ' ', token{}}
	t.nextChar()
	t.nextToken()
	return t
}

func (t *tokenizer) nextChar() {
	ch, _, _ := t.data.ReadRune()
	t.currentChar = ch
}

func (t *tokenizer) nextToken() {
	for t.currentChar == ' ' {
		t.nextChar()
	}

	switch t.currentChar {
	case '\x00':
		t.token = token{eofToken, 0}
		return
	case '+':
		t.nextChar()
		t.token = token{addToken, 0}
		return
	case '*':
		t.nextChar()
		t.token = token{multiplyToken, 0}
		return
	case '(':
		t.nextChar()
		t.token = token{openParen, 0}
		return
	case ')':
		t.nextChar()
		t.token = token{closeParen, 0}
		return
	}

	if unicode.IsNumber(t.currentChar) {
		var sb strings.Builder
		for unicode.IsNumber(t.currentChar) {
			sb.WriteRune(t.currentChar)
			t.nextChar()
		}
		val, _ := strconv.Atoi(sb.String())
		t.token = token{numberToken, val}
		return
	}

	panic(fmt.Sprintf("Unexpected character: %q", t.currentChar))

}

const RawInput = `(6 + 6 * 9) * 7 * 9 + (7 * (7 + 3 * 4 + 8 * 9 + 2) + 3 * 2 * 4 + 5) + 8 * 2
6 * 5 * 4 * 4 * 7
2 + 9 * 7 + 2 + 8 * 4
6 * (5 + (6 * 7 * 3 * 3 + 2 + 3) + 6 * (4 + 7 * 3 + 5 + 5 + 2) * 4 + 4) * 9
((2 + 3 + 4) + (7 + 7 + 8) + 8) + 5 + (4 + 9)
5 + (7 + 6 * 9 * 3) + 4 + 3 * 7
3 + 8 + (3 * (7 + 8 + 8 * 5 + 5 * 9) + 9 * (9 * 3 + 7 + 9 + 6) + 4) * 9
3 * 7 + 5 + (5 * 5 * (7 + 5)) + (2 + (9 + 9 + 6 * 3 + 9 + 2) + (4 * 4 + 3 + 2 + 2 * 3))
2 + (8 * (2 + 4 + 7 * 9 + 3) * (8 * 5 + 8 + 4 * 8 + 9) * 2 * 2)
5 + ((7 * 6) + 8 * 2) * 8 * 4 * 2
6 + (9 + 8 + 8 + 8 + 3 + (4 * 2 + 9 + 8 * 6)) * 7 + ((2 * 7 + 3) * 9 * (3 + 7 * 8) + 2 + (7 + 5 * 2 * 4 * 6 * 5))
8 + 9 * 2 + (2 * (2 * 7 + 6 * 7 + 4 * 6) * 6 * 8) * 8 + (4 * (6 * 9 * 5 * 9 + 6))
(6 + 4 * 2 * 7 * (3 * 5 * 4 + 3) + 4) * 7 + 2 * 6
((5 + 8 * 3 + 9 + 5) * 5 * (4 * 6 * 8 * 7 + 6)) + 6
2 + ((3 * 4 * 4 * 4 * 8 + 7) * 5) + (5 + 5 + 2 * 4) * (3 * 9 + (6 + 7 * 3 + 4 * 3 * 5) + (7 + 9 * 9 * 7 * 8 + 9) + 7) * 3 * 2
7 + ((3 + 8 + 2 + 5) * 2) * 5 + 4
(5 + 3 * 7 * 9 + 6) * 8 * 6 * 3 + (9 + 7 * 6 * (3 * 3))
(6 + (6 * 2 + 9 + 7) + (7 + 5 * 5 + 7) * (9 * 2 + 9) * 6 * (8 + 4 + 5 + 9 * 4 * 2)) + 7
9 * 4 + 3 * (5 * 4) * (9 * (2 * 5 * 5 * 7)) * 6
8 + ((2 + 5 + 7) + (9 + 5 + 2 * 2) + 2 + 2) * ((7 + 8 * 2 + 2 * 5) + (5 + 6 * 2) * 7 * 8)
((6 * 6 + 3 + 4 * 5 * 9) + 8) + ((9 * 6 * 5 + 3) * 3)
4 + 8 * 7 * 2 * (7 * 6 * 9 + 7 * 3) * 8
(2 * 9 * 7 * 4 + 4 + 7) * (9 * 3 + 5 + 6 * 3 * 3) * (7 + 6 + 2 + 6 + 8) * (8 * 3)
(4 + 4 + 9 + 2 + (2 + 6)) * (6 * 4 * 4 * 8 * 6) * 2
3 + 4 * 9 * 2 * ((3 + 7 * 2 + 6 + 4 * 5) * 3 * 9 + (7 + 9) * 7) + (5 * 2 * 2 + 6 * 4 * 5)
4 * 6 * 9 * (7 * 2 * 8)
9 + 5
(8 * 9 * 4 * (8 * 2 * 8 + 8)) + 8 + 8 * 6 * 3
2 * 3 * 8 + 5 * 8 + 7
3 + (7 * 2 + 6 + 8 + 8) * (9 + 6 * 3) * 9 + ((5 * 8 * 4 + 4 + 8 * 2) * 8 + 5 * 2) * 7
(8 + 2) + (3 + 2 * 5 * 9 + 5) + 2 * (2 + 9 + 4 + 6) * 4 * 2
9 * 7 + (8 + 9 * 5) + (3 * 2 + (8 + 8) * 7 * 9) * 2
3 + 9 + (7 * (7 * 9 + 5 + 3 * 3) + 4) * 4 * (3 + 2 * 5 * 6 * 8) + 5
8 + 2 + 4 * (2 * 6 + 6 * 8 * 6 * 4) + 7 + 7
4 + 9 * (6 * 9) * 2
5 + (4 * 8) + ((9 + 6 + 6 * 7 * 9 * 6) * 4 * (6 + 8) * 3 * 4 + 5)
5 * 7 + (8 + 7 + (3 * 7 * 9)) * 5
3 * 9 + 7 * (6 * 2 * 5 + 4 + 7) * ((4 * 6) * (5 * 2 * 6 + 8 + 9) * 9 * 8 + (3 + 5))
6 * (3 * 6 * 2 + 3 * 5) * 9
9 * 7 * (8 * 4 * 9) + 5 + ((2 + 7 + 8 + 7 + 3 * 8) * 9 * 2 * (6 + 9 * 6) * 8) + 8
(6 + 7 * 7) * 3 * 4
(7 * 6 * (3 * 8 * 7 + 5) * 7 * 8) + 4 + (2 + 2 * 2 + 9 * (3 + 3 + 4) * 7) * (2 + 5 * (8 * 3 + 3 * 5 * 3 * 4) + 9 * 2)
3 * 2 + (6 * 2 + 3 * 5 + 6) + 7 * 8 + 3
4 + 5 + 4 * (2 * 8 * 4 * (5 * 2 + 6) + 2 + 7) + 7 + 9
7 * 4 * ((3 * 8) + 3 * 2)
(2 + 8 * (7 + 3 * 7 + 2 + 6 * 5) * 7) + ((3 * 2 * 4 + 3) + 8 * 5 * 2 + 6 * (3 + 5 + 7 + 2 + 8 * 5)) * 8 + 5 + 9 * 9
7 * 4 * (6 + 3 + 2 * 9 + (7 * 5 + 4 * 5 * 9)) * (8 * (2 + 7 * 5) * 6 * 5 * 5) + 5
4 + 3 * (4 * (2 + 4) * 3)
(7 + 5 * (5 * 3 * 8 * 7 + 4) + (7 + 9 * 2 + 5 * 4 * 6) + 3 + 5) * 4 * 7 + 3
5 + 4 * 2 + 7 * 8 + (3 * 6 + 7 + 5 + 3 * (8 * 7 + 7))
2 + 8 + (3 + 5) * (8 + 2 + 5 + 9 * 2 * 7) + 7 + 4
5 * 5 * 2 + (2 + (7 + 3) * (7 * 4 * 3 * 4 * 6 + 5)) * 5
7 * 2 * (8 * (9 * 3 * 5 + 6) + 6 + (9 + 6 + 3 + 4) * 7)
(2 + 9 * 7 + 7) + 5 + 7 + 3 * (5 + 6 * 9 + 9)
3 * (5 * (5 + 2 * 9 * 9 * 5) * 3 + (6 * 2 + 7 * 5)) + (4 * 2 * 6) + 6 + 7 + 6
6 + 4
3 + 8 + 5 + (4 * 7 + 7 * 2 * 9)
((9 + 4 + 5 * 3) + 3 * 3 * 4 * 7) + 5 + 2 * (5 + 3 + 4 * (7 * 4 * 7 + 9) + 3 * 4) + 7 + 4
4 + 9 * (6 + 6 * (3 * 9 + 5 + 5 + 9 + 4) * 3) * 4
5 + 7 * 2 + 7 + (9 + (5 * 2 * 4 + 3) + 7) + (9 * (2 + 3) * 9)
3 * 8 + 5 + (6 + 3 * (2 * 2 + 5 + 6 * 9)) * ((3 * 4 + 9 * 2 + 8 + 5) * 2 + 4 * 3 * 9 + 8)
2 + (6 + 7 + 4 * 2) * (7 + 2 + 4 + 4 * 6 * (6 * 5 + 3 + 7)) + 6 + 9 * ((8 * 6 + 9 + 2 * 8) + 2)
((4 * 5 * 7 * 5 + 3 * 6) + 7 * 4) + 4 * 5
4 + 7 + ((8 + 3 + 9) * 6 * 8 * 4 * 2 + 2)
(3 + (3 + 8 + 3)) * 8 * 5 * 8 + 8
3 + (7 * 2 * (7 + 3 + 5) * 8) + 7 * 7
(2 * 6 + (5 + 8 * 3 + 3 + 5) * (2 * 4 + 2 * 2) * 4) * 8 + 7
(9 + 7 * 2 + 2) + 6 * 2
8 + 7 + (3 + 2 * 2 * (2 * 8 * 4) * 2 * 2) * 4 * (7 * 8 * 4 * 8 + 3) + 7
6 + 9 + ((5 + 8 + 5) + 7) * 6 * 8
7 * (7 + (7 * 6 * 3 + 8) + 5) * (2 * 9) * 5 * 5 * 9
(7 + (4 + 9) * 5 + 5 * 2 * (8 * 7 + 6 + 2 + 6 + 8)) + 6 + 3
9 * 7 * 2 + 5 * 5 + (6 + 9 + (4 * 6 * 6 + 7) + 2 * 7 * 6)
5 + (6 * 5 * 5)
(5 * (3 * 2 + 2) * 6 * 2 + 9) + 5 * 9
6 + 8 + (3 * 2 + (8 * 3 * 7 + 5) + (3 * 7 + 6 + 2 * 4) + 2)
(2 * 9 + 8 + 3 + 2) + (6 + 2) * 7 * 2
9 + (9 * (9 + 5 + 7 + 5)) + 5
5 + (8 * 5 + (3 + 7 + 6 + 7 * 5) + 8) * 4 * 8 + 7
((2 + 9 * 6) * 4 + 3) * (3 + 9 + 5 + 5)
8 + 3 + 3 + (7 * (9 * 3) * 9 * 7) * (3 + (3 * 3 * 4 + 6 * 8) * 7 + 5) + 7
7 + 6 * ((5 + 2) * 9 * 7 * 6 * 5 * 9) * 8
6 + (5 * 5) + 6 * 2 * 6
(4 + 2 * 2 * 8 + 5) * 6 * ((5 + 4 + 6 + 6 + 4 + 5) + 8 * (4 * 6 * 9 + 2 * 8 * 9) * 4 * (8 + 5) + 8)
(4 + 8 + 9 + 4 * 5 * (3 + 4 + 4 + 5 + 4)) + 2 + 9 * (3 + (9 * 6 + 9 * 7 * 8) + 6) * 8
(8 * 9) + (8 + 3 * 8 * 5 * 4 * 8) + (6 + 2)
9 * (6 * 4) * 9
9 * 9 + 9 * 3 + ((3 * 5 + 2 + 4) + 5 * (7 * 3) * 7 + 5)
((7 + 8 * 6 * 7 + 8 + 3) + 3 * 4 * 3 + 4 + 4) + 4
4 * (7 + (7 + 2)) * 6 * 8 + 8
3 + 9 + 4 + (7 + 4 + (7 * 9 * 8 * 2) + 4 * 3) * (4 * 6 + (3 + 2 * 9))
(3 + (5 + 3 * 7 * 8 * 4 + 2) + (8 + 5 * 4 + 9 + 9 * 4) + 4 + 8) * 3
6 + (7 + 5 * (4 * 4) + 8) * (6 * 2 * 4 + 8)
6 * (3 + 9) * 8 + 4 * ((9 + 2 + 3 + 4 * 7 + 8) * (5 + 7 + 2 * 9) * (8 * 4) + 2 * (6 * 9 + 4 + 7) * 6)
7 + 8 + 2 + ((7 + 4 + 9 * 5 + 4) + 7)
(4 * 6 * 5 * (5 * 8 * 4 * 4) * 8 * (7 + 3 + 9 + 7)) + 8 + (9 + (9 + 3 + 9) + 8) + 7 + 7
7 * 3 + 4 * 6 * 6 * (5 * (6 * 3) * 9 * 2)
(4 + 8 * 2 + (3 * 7 + 4 + 6) * 2) + (8 * 3 * 2 * 6) + 3 * (4 * (5 + 6 + 9) + 5) * 7 * 3
((5 * 5) + 9 * 6 * (3 + 3 + 5)) * 4 * 8 * 7 * 5 * 6
6 + 6 * 5 * (6 * 4) * (9 + 4 * 7 + 5 * (7 * 4 * 9 * 8)) + 2
7 + 7 + (2 + 3 * 9) * 5 * 2
3 + 7 * (6 * (6 * 2 * 8))
9 + 8 * ((6 + 6 + 2 * 6) + 4 + 5 + 9 + 9 * 3)
(6 + 7 * 8 * 8 * 2) * (5 * 6) * 7 * (7 + (8 * 9) + 7)
6 + (6 + 2 * 8) * ((9 + 9 * 5 * 9) * (2 + 8 + 8 + 5) * 6 + 5 * 5) + 8 + 8 + 2
(8 + 7 * 3 * 5) + (5 * 7 + 4 * 3) * (5 * 7 + 3 * (3 * 8 + 7) * 2) * (7 + 5 * 9) * 2 + (4 + (4 * 2 * 2) + 8 * (4 + 2 + 4 + 5 * 9))
(9 + 2 + 4 + 4 * 4) * 2 + 4 * 2
(6 + 5 + 4 * 9 * 8) * 5 * 7 + 5 * 4 + (3 + 3 + 4 + 3 * 6)
(6 + 8 + 3 * 5 * 3 * 6) * (6 + 6) + (8 * 8 + 3 + 6 * 9 + 2) * 6 + 7 * 5
(3 * (4 + 3) + 8 + 9 * 9 + 3) + 4
(4 * (3 + 2 + 8 + 8) + 8 + 2) * 4
8 + 8 * 4 * 8 * 4 + 3
7 + (9 * 2)
((4 + 2 + 5 * 2 * 6 * 8) * 7 + 6 * 3 * 8 + 4) * 3 * 2
6 + 6 * (5 + 9 * 7 + 2 + 3 + 9) + 5 + 7 * 3
((4 + 4) + 6 * 5) + 7
5 + 4 * 7 + 9
6 + 8 * 5 + (2 * (9 + 6) * 6) + 4 * 5
(3 + 6 * (6 * 4 + 6 + 2) + (6 * 4 * 8 * 2)) * 3
9 + 5 * (9 + 2) * (8 + (4 + 5 + 2 * 3 * 2 * 3) * (6 + 5 + 6 + 4)) + 6 * 5
(4 * (6 * 5 + 5) * 7) * 9 * 5 + (8 * 9 + 2 * 2) + 6
(4 + 8 * 2) + (7 + 5 + (7 + 3 + 4) * (2 * 8) + (3 * 7 + 2 + 4 + 9))
6 + (7 * 4 + 5 * 7 + 4) * 3 + (6 * 7)
9 + (9 * (2 * 3 + 3) + (5 + 9 + 7))
(6 + 6 + (9 + 8 * 9 + 2) * 7 + 6) * 7 + 5 * 4
9 + 6 * 6 + 9 * 6
7 * (9 * 9 * 6) + 4 + ((7 * 8 * 7) * 9 * 9 * 2)
2 * 2
3 + 4 + (9 + 6 + 4 + 8) * 7
9 * (2 + (8 + 7) + 8 * 5 + (7 + 9) + 9) * 7 * 8 + 5 * 6
(8 + 3 + 4 + 6 * 6 + 5) * 9 + 5 + (5 * (9 * 8 * 5 * 5) * 7 * 4 * 2) * ((2 + 7 + 3 + 5) + 7) * (4 + 3 + 9 + 4 * 5 + 4)
3 + 2 + 6 * (5 * (4 * 5 + 2) * (5 * 4))
5 + 2 * 2 * (6 + (6 + 9 * 9 * 8 * 7 * 6)) + 5 + 7
8 + 7 + 8 * 6 * 2
((5 * 7 + 9) * 9 * 2 + 9 + 7 * 6) * 5 + 2 * (9 + 2 + 6 * 2 + 9) + 6 * 7
3 * ((7 * 8) + 4) * 8
(9 + (2 * 8 * 2 + 5 * 2 + 6) + 8 * 8 * 7 + (5 * 2)) * (2 + 8 + (6 + 7 * 4 + 6 * 8) + (3 + 3 + 6 + 5) * 2) + 7 + 6 + 2
(7 + 3 + (5 * 6 + 6 * 8) + 4 * 3 + 5) * 3 + 6 + 7 * 7 * 9
4 * (9 + 6 + 7 + 2 + 4 + 2) + 3 + 4 * 7
6 + (4 * 4 + 6) * 4 * ((4 + 3) * 2 + 4) * (9 * 6 * 3) * (7 + 7 + 3 + 4)
2 * (5 * 6 * 5 * 8) + 3 + 2 + (8 * 9 + 6) + 4
((8 * 6 * 6 * 7) * 6 * 3) + 2 * (3 * 9) + 9 + (6 * 5 * (4 * 5) + 5 + 3) * (6 * 7 * (2 * 5 * 2 + 6 * 6 + 3) + 4 + 3 + 3)
5 + 4
((5 + 8 + 8 + 9) + 8 + 3 + 8 + 9 + 6) + 6 * 7 * 3 * 3
(5 + 9 + 2) * 9
4 + (3 + (7 + 3 + 6)) + 2 * 6 * 5 + 8
7 + 9 * (3 + 2 * (3 + 5 + 2 * 7 + 4)) * 4 * (2 + 7 + 2 * (4 + 5 + 8 * 4 + 9) + 9 + 3) * ((7 + 9) + 8 * 3 + 5 * 7)
((2 + 9 + 5 * 6 * 4 * 3) + (2 + 4 * 2 * 7 * 3)) * 7 + 2 + 9 + 8
7 + 7 + 9 + 2 * 3
2 + 2 * (3 + 7) + (9 + 8 + 7 + 7 + (2 * 4 + 2) * 5) * 8 + 3
(3 * 6 * (7 * 4 * 4 + 7 + 7) + (6 + 9) * 4 * 3) * 9 * 9
(5 + 3 * 9 * 7 * 8 * 7) + 9
3 * 2 + (5 + 7 * (6 + 2)) + 2 * 8
4 * ((5 * 6 * 3 + 3) + 6 * 7 + 9 + 7) + 2 * 5 * ((3 * 3 * 8 + 8 * 9) + 9 + 5 * 3 + 7 * 9)
9 + (7 + (8 + 6 * 9 + 5 + 8) * 6 * 7 * 3)
((7 * 4 + 7) + 8 * 7 * 9) + 3 + 4 * 4
(5 * 8 * (3 * 8 * 3 * 3 + 2) * 6 * 2 * 2) + 6 + 7 * 6
5 + 7 + 7 + 4 + 3 + (6 + 5)
9 * (7 + (2 * 3) + 9) * 7 + 6
2 * (2 + (3 * 6 + 9 * 3 + 9) + 8 * 7) + 6 + 6 + 7
(6 * 3) + 7 * (8 * (8 * 7))
((7 + 3 + 7 * 5 * 9 + 3) * 7 * 3 + 7 + 7) + 8 * 7 + 9 * 2 + (3 + 7)
(7 + 7 * 6 + (5 * 3 * 2 * 4 * 8)) + (2 * 6 * 8 + 7 * 5) + 2 * ((2 * 4 + 3) * 6 * 8) * ((8 * 5 * 5 + 8) * 2 + 5 * 9 * 7) + 5
3 + 6 + (9 * (3 * 9 * 2 * 9 + 3) + 7 + 2) * (7 * (4 + 5 * 5 + 7 * 5)) + 2
3 + ((5 + 8 + 4 + 9 * 6 * 8) + (9 + 8 + 2 * 3 + 5 * 8) * 6 + (9 * 9 * 2) * 3 + 4)
3 + (5 + 2 + 9 * 7) + 9
2 * 6 + (9 + 4 * 3 + 4 + 4 + 2) * 3
7 * 9 * (3 * (5 * 5)) * (8 * 9)
6 + 2 * 9 * (7 + 7 * 3 + 8) * 5
5 + 3 + 6 * (4 * 7 * (6 * 7 * 3 * 9) + 7) * 3 + 2
6 + 8 + ((5 * 4 + 5 * 2) * 2) * 5 * 9 * 9
5 * 7 + (4 + 4 + 9 + 7) * (2 + 2 + 2 + 9 + (2 + 8 + 5) + 4) + 3 + 7
8 + 9 + (9 * 2 * 6 * (7 * 6 * 3) + (3 * 5 * 2 * 3))
8 + 5 * ((9 * 4 * 8 * 7 * 5 + 8) * (7 + 7 + 6 + 9 + 8 * 6)) * 5
9 * 2 + 4 * 9
(5 * 3 + 5 + 8 * 5 * 4) + 3 * 2 * 6 * 6 + 9
((2 * 9 * 6) * 2 * (7 + 3 * 7) * (4 + 2 * 2 + 9)) + 6 * 5 + (8 + 6 + 5 * 8 * 3)
(5 * 6 * 7 + (7 * 4) * (6 + 3 * 4) * 4) + (8 + 4 + (3 * 5 * 6 * 3 * 3 * 4) + 9 * 3) * ((9 + 8 * 8 * 9 * 2 * 4) * 9 * 2 * 8 * 7) * 4 * 8
8 + (2 * (8 * 7 * 6) * 3 * (2 * 7 * 8 + 9 * 9 + 7) * 2)
2 + (9 + (9 * 9 + 9)) * 6 * (7 + 5 * 2 * 9 + 8)
6 * 9 * 6 + (3 + 2 * 9) * 5
9 * 7 * 2 * 6 * 7 * 6
5 + 2 * (3 * (3 + 5 + 2 + 5) + (5 + 5 * 5 * 6) * (9 + 8 * 4 * 8) * 3 * (4 + 9 + 4 * 2 + 5)) + 9 + 8 * (7 + 4)
8 + (9 + 7 * 3 * 2 + 5 + 6) + (7 + 2 * (3 * 9 + 5 * 9 * 5 + 7) + 8 + 2)
9 + 5 * ((4 * 3 * 5 * 2) * (7 + 9 * 3) * 4 * 7 + 9 + 8) + (6 + 6 + 3 + 5 + 3)
8 + ((2 * 8 * 8 * 7 + 9) + 6 * (5 * 4 * 5) + 2 * (2 + 3))
(5 + 4 + 5 * 9) * (5 + 3 * 5) * 5
3 + 4 * ((5 + 8 * 6 * 9 + 9 * 8) + 5 * (3 + 4 + 9) + 5)
(9 * 4 * 6 + 7 * 4) * 3 * 7
((2 + 7 * 3) * 7 + 7 * (4 + 4 + 8) + 8 * 7) + 7 * 7 * ((7 + 6 + 6 * 6 * 8) * 8 + 3 + 5 * 8 + 2)
2 * 8 + 2 + 4 + 6 + (8 * 5 * (3 * 8 + 5 + 2 * 2))
5 * 6 * 3 + 3 * ((5 + 4 * 4 + 6) * 9 + 4 * 5) * 7
5 * (7 + 4 + 7 + 5) + (9 + 2 * (5 + 7 + 9 + 3 * 9 + 5) * 7 + (8 * 2 * 8 * 7 * 9) + (5 * 8)) * 6 * 6
4 * ((3 + 4 * 6 + 6 * 2 + 4) * 9 + 5 * 2 + (4 * 9 + 8 + 8 + 6 * 2) * 6) + 6
(8 + (4 * 6) + 7 + 6) * 3 + 3 + 9
7 * (4 * 5 + 8 + 2 + 4 * 3)
7 + (6 + 7 * 3 + 5) * (3 * 6 * 7 + 8 + 4 + 8) * (4 * 6 * 9 + (6 + 6)) * 3
5 + 9 + ((4 + 8 * 8) * 6)
4 + 7 * 3 * 3 * 2 + (6 * 5 * (4 * 8 * 3 + 9 * 5 + 5) * 2)
4 + 5 + (5 * 6 + (4 + 8) * (8 + 8 * 6 * 4 + 7 * 3) + 3)
((8 * 4 + 4) + 5 * 6 + 5 + 3 + (2 * 4 + 7 * 9 + 5)) + (3 * 2 * 3 + 7 + 5)
(9 * 6 + 4 * 3 + (3 * 4 + 8) + 6) * 8 * 6 * 2 + 4
2 + 2 * 9 * ((9 * 3 * 6 + 3 + 2 * 8) + 5 * 6)
7 * 8 * 7 * 7 + 9 * (8 * (5 + 6 + 4 + 2) * 5 + 7 + 8)
(3 + 2 * 4 * 9) + 6 * 3 * 3 + 3 + 3
4 * 6 * (2 * (6 + 5 + 7 + 7) * 7 * 7 * 6 * 4) + 5 * 8
(6 * 8 * 8) * 4 * 3 + 6
6 + (3 * 3 * 8 * (5 * 8 * 2 + 4 + 2 + 4))
5 * 2 * (8 * 3 + 3) * ((6 * 3 + 6 * 9 * 5 + 2) + 2 + 2 + 9 + (5 * 3 + 3))
(6 + (9 + 3 * 8 * 9 * 4 + 4) + 7 * 8 + 5) * ((8 + 4 + 7 * 9 * 7 + 6) + 4 + 5 * 2 + 4) * 5 * 2 * 8
7 * (4 * 2 * 5 * 9 * 7) + 4 * 7
(5 * (4 * 2 + 6 + 5) + (9 * 3 * 2 + 2 * 4 * 2) * 7 * 9 * 8) + 8 + 4 + 9 * ((9 * 9 * 9 * 7 * 6) + 6 * (4 * 5 + 7 * 8) + 5 * 3)
3 * 3 + 5 + (6 * (3 + 5)) + 4 + 7
9 + 4 + (9 + (9 + 7 * 3 + 8 + 4) + 6 + 7 + 7 * 5) * 6
9 + (9 * 6 * (9 * 5 * 6 + 9 + 9) + (4 + 2 + 9) * 4) + 6 + 8 * ((6 * 8 + 4 * 4 + 4) + 2 + 7 + 7 * 3 * 6)
3 + (9 * 2 * (5 * 8 + 8 * 6))
2 + 8 * ((4 * 5 * 2 + 5 * 3) + (5 * 2)) * 5 * 4 * (6 + 7)
2 + (4 * 8 + 9 + 6 + 5) + (3 + 5 + 4 + 3 + 6) * 6
4 + (5 + (2 * 4 + 8 + 6 * 8 * 5))
4 + 6 + 2 + (4 + 3) + 6 * 5
8 * 4 + ((8 * 7 + 9 + 4) * 7 + 4)
(2 + 5) * 6
9 * (3 + (7 + 7) + 7 + 4 + 5 * 2) + 9 * 5
4 * (7 * (2 * 4 * 5 * 7 + 8) + 8 + 6)
4 * (5 * 2 * 3 * 9)
3 * 6 + (9 + 3 * 4 * 3 * 6 + 7) * (4 * 8 + 8 + 7) * 8 * 8
5 * 4 * (3 + 5 + 8 * 4 + 3 * 2) + 3 * 7
(6 * 7 * 3 * 9 * (9 + 4 * 5)) + 7 * (2 + (7 + 2 * 5 + 3 + 6)) + ((5 + 7) * 9 * 7 * 2 + 4) * 7 * 3
4 + 2 * (4 + 3 + 5 + 9)
(6 * (2 * 7)) + 5 * 3 + 8 * 4
(8 + 3 * (5 * 7 + 4 + 9 * 3) + 5 * (6 + 8) + 8) * 8 * 4 * 2 * 7
(8 + (3 + 8 * 2) + 4) + 5 * 2 + 7 * 6 * 9
(8 * 7 * 6 * 3 * 3 * 4) * 7 + 3 * 4 * 4
5 + (5 * (9 + 9 + 4) + 2 * 5)
3 + 8 + (3 + 8 * 4 + 2) * 6 * 6
(8 + 8 + 2 * 8 * 8 * 7) + (6 * 2 + 8 + 3 + 3) + 2 + (8 * 6 * 4 * 3 * 9 * 3)
8 + 9 * (5 + (4 * 5 + 9) * 2 * 6 * 9 * (8 * 3)) * 5 + (4 * 4 + 7 * (6 * 4 * 8 + 6) * 2 * 8)
6 * 8 * (9 * 6 * 7 * 6) + (9 + 9 * 7) + (2 + 5 * 8)
7 * 8 * 6 * (7 * 6)
3 * 3 + 5
((7 + 8 + 9 * 8 * 8 * 4) * (4 * 7 * 4 + 3) + 9 * (8 + 6 + 3) + 5 + 2) + 2 * (8 + 3 + (5 * 4 * 8 * 2 + 3 + 7) + 4) + 3 + ((7 + 4 + 6) * 6 + 9 * 6 + 9 + (4 + 3 * 9 + 8)) + 2
2 + (9 + 6 + (8 * 2 * 5)) * 5 + 4
9 + 2 * 4 + 4 + (4 * 9 + 8 * 9 + 2 + 2)
2 * (8 * 5 + 7 * 5) * 5 + 5 * 7 + 6
4 + 5 * 6 * 9 + 7 * 4
(5 + 4 + 7 * 3 + (7 + 6 + 3 + 4 * 7 * 5) * 2) * 3
3 * (7 * 7 * 9 + 3) * 3 + 5
9 * 5 + (8 * 9 * (3 * 3 + 3 * 2) * 3 + (5 + 4 + 2 + 7) * 9) * 3 * 6
4 + (8 * 5 + 7 * (9 + 3 * 3 + 2 + 7 * 8) * 6 * (9 + 6 + 6 + 6)) + 9
4 + 8 * 6 * 5
7 * 2 * (3 + 2 + (4 * 5 + 3 * 3 + 3)) + 2 * (2 * 5) + 8
(4 + 3 * 4) * 8 + 7 + 2 + 8 + 7
5 + ((3 * 8 * 7 + 7) + 5 + 3 * 5 * 4 * 3) * 8 * 7 * (3 * 5) + 3
6 * 8 * (7 + 2 * 2) * 9
6 * 9 + 2 + ((4 * 7 + 5 + 2 + 9) + 2 + 9 * 4) * (5 + 9 * (6 * 3 * 5 + 4 + 3 + 7) + 9)
5 * 4 + 8 * ((4 + 7) + 9 + 3 * 7 + 6 * 2) * 3 + 8
8 + 7 * (8 * 6 * (7 * 3 * 5 * 5) + 8) * 4 + 8
(8 + 4 * 3 + 7 + 9) * (6 + (2 + 8) * (7 * 2)) * 7 * 8 + (3 * 3 + 6 * 3)
6 + 8 + 5 + 8 * ((8 * 3 + 6 + 4 * 9 + 9) + (4 * 5 * 6 + 3 * 7 * 8)) + ((5 + 4 + 4) * (2 + 4 * 8 * 6) * 6 + (4 + 9))
7 * (2 * 5 + (8 * 9 * 7 * 6 * 3) * (2 + 2) * 8) + 2 + (5 * 4)
(6 + 4) + 5 + 2
7 + ((5 * 3 + 8 + 3 * 5) * 7 + (5 + 9 + 9) * 4 + 5 * 5)
9 * 6 + 4 + (5 * 5 * 2 * (5 * 8 * 6 + 7 * 5 + 2) + 7) + 6 + 2
8 + ((4 * 5 + 6 + 2) + (5 * 4) + 9 * 4) * (4 + 2) + 4 * 9 * 5
8 * (8 * 5 + (2 + 7 * 4 + 7 * 2) + (4 + 3 * 6) * 8 * 6)
4 * ((8 + 8 * 8) + 4 * 8 * 6 + 8) + (4 * 3 + 5 * 2) * (5 + (2 * 3) + (7 * 7 * 9 + 6) + 9 + (9 + 4) + 9)
8 * 9 + 9 + (3 + 3) + 7
((6 + 5 + 6 * 2 * 9) * 9) * 2 + 4
4 + 2 + (5 + 4 + 3 * 6 + 5)
((7 * 5 * 4 + 8 + 5 * 6) * 4 * 5 * 4 + 3 + (6 + 2 * 8 * 8)) * 5 + (3 * 5 * 2 * 2) + 2
8 + 4 * (9 * (8 * 7 + 6 + 8)) * (3 + (6 * 7 * 5 * 3 + 4 * 7) * 9 * (3 * 2 * 3) + 5) + 8
3 * 2 + ((6 * 3) * (2 + 7) + 5) * 4 * 4 * 7
((5 + 7) + (8 + 4) + 3) * 2 * 3
2 * 6 * 2
3 + 6 * 2 + 6 + (4 + 6 + (7 * 4) + 8) * 8
7 * (3 + 7 + 5 * 5 * 5 + 6) * (3 * 3) + 5
((3 * 3 * 7 + 8 + 3) + 3 * 6) + 6 + 6 * 4
((8 * 7 * 5) + 2) + (3 + (4 * 6))
8 + 7 + ((3 + 2 + 6 + 3 * 5 + 7) * (9 + 6) + 7 + 6 * 7 + 6)
(5 * (4 + 2 + 6 + 4) * 3) * (3 * 6) + 5
6 + (6 + 9 + 3) * 6
(2 + 7 + 3 + 3 * 2 + 9) * (4 + 6 + 2)
2 + (6 + 6 * 2) + 7 * 4 + (4 * 7 + 2 * 5 * 6 * 5)
(8 * (7 + 7 * 7) * 7 + 4 * 7) + 7 * 4 + 5
(8 + (8 + 2 * 5 + 8 + 7)) + 5 + 5 + 5 + 2
((7 + 3 + 4 * 9 * 9) + 2 * (7 * 4 + 2) * 4) + 2 + 7
4 * 6 + 8 + (7 + 5 + 8 + 9 * 9) * 8
3 * (2 * 6 * 6 + (2 * 5 + 7) * (8 * 8 * 7 * 2) * 8) * 4
3 + 5 * 5 * (2 * 4 * (8 + 2 * 7) * 5)
(8 * 5) * ((5 * 4) * 7 + (2 + 8 * 7) * 7) + 4
8 + 2 + 7 * 4
(3 * 3 * 5) * (8 + 3 + 9) * 9 * 9 * 3
8 * 6 + (3 + (2 + 9 + 5) + 5 + (5 + 8 * 4 + 5 + 8)) + 3
((5 + 6 + 8 + 7) + 4 * 9 * 2) + (9 * 2 + 4 * 6) + 8 * 6 + (5 + 3 + (3 + 6 + 9 * 9 + 3 * 8))
2 + (2 + (3 * 6 + 2) * 4 * 9 + 6 * 7) * 8 + 8 * (7 * 9 + 7) * 2
3 + 4 + ((7 * 9 + 5 * 8 * 3 * 7) + 3 + 3 * 6 * 5 * 2)
6 + 5 * 5 + ((2 * 5 + 4 + 6) * 6 * 9) * 8
3 * 7 * 5 + (5 + 5 + 3 + (4 + 3 * 9 + 4) * (4 * 3))
7 + 7 + (7 * 4 * 6 + (5 + 4 * 6) + 5) + (2 + 5 * 5)
5 * 3 * 6 * 7 + ((6 + 2) * 9 + (8 + 5) * 3 * 7 + 2)
(7 + 8 * 2 * 3 + 3 * 3) + 2 * (9 + 2 * 5) * 3 + (8 * 4 * 7 + 3)
(7 * 9 + 2 + 9 + (2 + 4 * 5 * 8 + 2 + 8)) * 4 + 7 * 2 + 2
(7 + 4 * 2) * (8 + 9 + 6)
(4 * 9 * 8 * 9) * 4 * (5 * 2 + 3 * 9 * 3 * 3) * 5 + 5 * 9
5 * 2 * 9 + 5
((8 + 4 * 2) * (2 + 2 * 8 + 3 + 9 + 9) + (4 * 6 + 9 + 5 * 3 * 6) + 3 + 9 * 3) + 8
2 + 6 + (4 * (4 + 3 + 5 * 9 + 5) * 9 + 8) * 8
2 * ((4 + 3 + 2 * 7 * 8 + 9) * (7 + 5 + 3 + 9 + 2) * 3 * 9) + 6 + 9 + 7
7 * 2 * 7
(5 * 3 * (3 + 6 * 2 + 9 + 8 * 4) * 9 + 7 * 8) * 8
4 + (8 * 8 + 2 * 9 * (6 * 8) * (8 + 9 * 6)) + 8 + 3 + 8 * 9
5 * (5 + 9 + 6) + 4 + 6
(4 + (4 * 3 * 3 * 7 * 2 + 2) * (6 * 8 * 4 + 8 + 4)) + 3 * 4 + 8 * 7
9 * (2 * 3) * 5 * 2
8 + 3 + (3 * 7 * 8 + 7 + 4) + 6 * (2 + 5) * (2 + 7 * 8 * (3 * 8 * 2 * 3))
8 * (7 * 8 * 5 * 2) + 2 * 6 + 6 + (3 * (9 + 5) + 2)
2 + (4 * 2 + 8 * 6 * 9) * (3 * 9 * 9) + 8
7 * (5 + 3 + 9) * 5 * (9 + 4 * 4 + 6 * 4)
6 + 3 + 6 + ((9 + 5 * 7 * 8 * 9) * 2 * (2 * 5 * 3) * 9) * (8 * 8) * 5
3 + (9 * 7 * (9 * 4) + 6) * 5
2 * 7 * 2 + (4 + 5 + 9) * 4 * 9
(8 * (3 + 7 * 2 * 7)) + 4 + 2
4 * (8 * 3 * 2 + 4 + 2 * 2) + 8
(3 * 9 + (6 + 7 + 3 + 6 * 8 * 5) + 2) * 5 + 6 * (9 * 4)
(2 * 4) * ((8 * 3 + 9) + 2 + 8 + 2)
(7 + 9) + (7 + 8 * 6) * 6 * (7 * 6 * 6 * 7 * 6 * 5) * 2
(9 + (6 * 4 * 6 * 9 + 9 + 7) + 5) * 6 + 4 + 3 + 7 + 8
9 + 9 + 8 + 7 * (5 + 3)
8 + ((5 + 2 * 4) + 7) + 2 + (9 * 8 * (8 * 4 * 6) + 4) * (2 * 2 + 8 * 3 * 6) + 9
2 * (7 * 7 * 4 * 6 * 7) + 9 + 3 * (5 + 5 * 9 + 3 * 4 * 8)
2 * 6 * 4 + (4 + 7 + (7 * 6 * 4 + 6) * 5 * 2 + 8) + 5
(4 + 6) + 5 + 8 + 4 + 7 + 8
9 + 4 + 5 * 8 * 7
5 * 9 * (7 + 7 + (6 * 9 * 8) + 4 + 8 * 9) * 4 + 5
(4 * 6 * (6 + 6 + 3) + 4 + 4) * 8 * 8
7 * 5 * (4 * 6 + 5)
(5 * 4 * 5 + 8 * 9 + 9) * 6 * 5 * 8 * (5 + 2 * 9 * 6)
5 + (2 * 3 * (7 * 9 + 7)) + 6
5 * 8 * 7 + 2 * (7 * 5 * 6 * 7 * 5)
8 + 7 + 4 * ((3 + 5 + 5) * (4 + 4 + 7 + 4 + 9)) * 4 * 4
(4 + 8 + 7 * 7) * (5 * 5)
((4 * 4 + 2 * 4) * 2 * (4 + 7) + (9 + 9 * 7)) * (7 + 8 + 6)
3 * (9 * 7) * 7 + (9 + (5 + 2 * 7 + 5 * 7 + 8) * 4 + 2 * (6 + 7) + 5) * 2 * 4
8 + 2 * 5
3 + 5 + 7 + (3 * (5 * 6 + 7 * 2) + 8 + (6 * 8 + 7 + 8 + 3) + 6 * 2) + 9 + 6
6 + 6 * (5 + 9 + (6 + 5) + 4 + 6) * 8
(9 + 5 * 5 * 4) + (6 * 7 * (8 * 3 * 5 * 2 + 2) + 6 + 3) * (9 * 7 + (4 * 6 * 9 + 7 * 8 + 7)) * 3 + 2
8 + (6 + 2 * 2) * 5 * (9 * (9 + 3 * 2 + 3 + 5 + 3) + 6) + (5 + (9 * 8 * 2 * 8 + 6))
4 + 7 + (4 * 7 * (4 * 2)) * 9
(3 + (9 + 8 * 8 + 3) * 2 + 2 + 4) + 5 * 7 + 7 + (8 * 4 * 8 * 8 * 5)
5 + (8 * 7 * (5 * 2) + (8 + 2 + 7 + 4 + 2 + 8) + 4 * 8) * 6
(9 + 3 + 9 * 9) * 4 * 2 + (4 + 8 * 2 + (2 + 7 * 8) + 6)
6 + (5 + 2 + (5 * 7 + 4 + 2) * 8 + 8) * 2 + 9 + 9
(3 * (2 + 4)) * 4 * 5
2 * 5 + 5 + 3 * ((4 + 7 + 8 * 4 * 3 * 8) * 4 + (3 * 7 + 7) + 9 * 7) + 8
9 * 2
(4 + 9 * 2 + 5 + 3) * 8 * 5 + (9 + (6 + 8 * 8 * 5 + 4 + 5) + 7 * 2 * 5 + 3) + 5 * 8
8 + 2 * (7 * (6 + 5 + 5 + 5) + 4) + 8 * 2
7 * 9 + 6 + (9 + 5 + 6 * 3)
4 + 2 * 4 * (8 + 7 * 4 * (2 * 6 + 3 + 7 + 2 * 8) * 3 + 3) * 6
6 + 8 * (9 * 7 * (6 + 5 + 2 * 2 + 5) * 4 + 3 + 6) + 5
4 + (4 + 5 + 6 * 5 + 9) * 2 * 3 + (6 * 4 * 2)
((2 + 9 * 3 * 3 + 4) * (7 + 3 * 6 * 6) * (9 + 3) * (8 * 2 * 4) + (2 * 8) * (5 + 9 + 9)) * 4 + 6 * 5
(4 * 2 * 3 + 2) + (4 * (4 + 9 + 9)) + 4 * 6
((9 * 9 * 8 * 4) * 5) * (6 + 6 * 7 * 4 * 7 + 5) + 8 * (2 * 5 + (9 + 7 + 8 * 3 * 3 * 6) * 2 * 2 * 9)
((9 * 4 + 5 + 7 * 2 * 7) + 9 + 3 + 9 + 6 * 6) + 7 * ((9 * 6 * 7) + 7 * 8) + 4 * 8 + ((9 + 4) * (4 * 7))
8 + 4 * 4 + 4 * (3 + (4 * 5 * 4) + 5)
2 * 4 * 3
4 * ((3 + 2 * 6 * 6 * 7) + 7 + 7 * 5 * 9) + 7 * 5 + 4 + 3
5 * 8 * ((4 * 8 * 3 * 4 * 7 + 6) + 6 + 5 * 9) + 5 * ((3 + 4 + 4) + 3 * 4 + 8 * 4)
(7 + 6 + 3 + (8 + 7 * 8) + 6) + ((6 * 5 * 7 + 3) + 2 + 3) + 2
6 + 5 + (3 * 3) * 9 * (7 + (3 * 6 + 2 + 3 * 3 * 8) * 5 + 4 + 7 + (7 * 8 + 8 + 2 * 3)) * 9
((2 + 3 * 6 * 2) * 5 * 7 * 7 * 2) + 4 + 2 * 6 + 5 + (6 + 7 * 4 + 5)
3 * ((2 + 8) + (8 * 8 + 6 + 9 * 5) * 5 + 2 + (4 * 2 + 8 * 4) + 9)
8 + 8 + 8 * 5 + (7 * 8 + 2 + 8) * ((7 * 4 * 2) + 4)
5 * (4 + 2 * 9 + 4 + 5) * 6 + 7 + (4 + 3 * (6 * 2) * 4 * 5 + (8 * 2 * 6 * 9 + 7))
3 * (9 * 3) + 6 + 5 + 4 * ((6 * 7 + 9 + 6) * 8 * 5 * (8 + 9 * 6 * 5) * 7)
7 * 4 + (8 * 4 + (6 + 9 + 7 + 3) + 8) * 8 + (9 * 2 * 2 + 4 + 9 * (3 + 5 * 9 * 9 * 5 * 9)) * (3 * 9 * 6 * 9)`
