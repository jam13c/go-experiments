package main

import (
	"errors"
	"fmt"
	"io/ioutil"
	"math"
	"regexp"
	"sort"
	"strconv"
	"strings"
	"time"
)

func main() {
	fmt.Println(part1(RawInput))
	fmt.Println(part2(RawInput))
}

func part1(input string) int {
	result := 1
	pieces := mapInputToPieces(input)
	count := 0
	for _, piece := range pieces {
		if piece.isCornerPiece(pieces) {
			result *= piece.id
			count++
		}
		if count == 4 {
			break
		}
	}
	return result
}

func part2(input string) int {
	pieces := mapInputToPieces(input)
	puzzle := buildPuzzle(pieces)
	marked := markSeaMonsters(puzzle)
	s := ""
	for _, m := range marked {
		s += m
	}
	return strings.Count(s, "#")
}

func Check(e error) {
	if e != nil {
		panic(e)
	}
}

func ConvertToInt(line string) int {
	result, err := strconv.Atoi(line)
	Check(err)
	return result
}

func CheckRegexp(pattern string, value string) bool {
	isValid, err := regexp.MatchString(pattern, value)
	Check(err)
	return isValid
}

func IsInArray(needle string, haystack []string) bool {
	for _, validValue := range haystack {
		if needle == validValue {
			return true
		}
	}
	return false
}

func IntInArray(needle int, haystack []int) bool {
	for _, validValue := range haystack {
		if needle == validValue {
			return true
		}
	}
	return false
}

func GetKeys(aMap map[string]func(string) bool) []string {
	keys := make([]string, len(aMap))
	for key := range aMap {
		keys = append(keys, key)
	}
	return keys
}

func PrintTimeSince(start time.Time) {
	fmt.Println(time.Since(start))
}

func LoadFile(path string) []string {
	file, err := ioutil.ReadFile(path)
	Check(err)
	lines := strings.Split(string(file), "\n")
	return lines[:len(lines)-1]
}

func MapToInts(strings []string) []int {
	var ints []int
	for _, s := range strings {
		ints = append(ints, ConvertToInt(s))
	}
	return ints
}

func mapInputToPieces(input string) (result []piece) {
	split := strings.Split(input, "\n\n")
	for _, part := range split {
		lines := strings.Split(part, "\n")

		edgeWidth := len(lines[1])

		edge1 := edge("")
		edge3 := edge("")

		inner := []string{}
		for i := 1; i <= edgeWidth; i++ {
			edge1 += edge(lines[i][edgeWidth-1])
			edge3 += edge(lines[i][0])
			if i == 1 || i == edgeWidth {
				continue
			}
			inner = append(inner, lines[i][1:edgeWidth-1])
		}

		edge0 := edge(lines[1])
		edge2 := edge(lines[edgeWidth])

		r := regexp.MustCompile(`\d+`)
		id := ConvertToInt(r.FindStringSubmatch(lines[0])[0])
		piece := piece{id: id, edges: [4]edge{edge0, edge1, reverse(edge2), reverse(edge3)}, inner: inner}
		result = append(result, piece)
	}
	return
}

func buildPuzzle(pieces []piece) []string {
	sortedPieces := make(map[int][]piece)
	for _, piece := range pieces {
		optionCount := len(piece.getMatchingEdges(pieces))
		sortedPieces[optionCount] = append(sortedPieces[optionCount], piece)
	}

	piece1 := rotateTopLeftPiece(sortedPieces[2][0], pieces)
	occupiedSlots := occupySlots(piece1, sortedPieces, pieces)
	if !areAllOccupied(occupiedSlots) {
		piece1 := rotateTopLeftPiece(sortedPieces[2][0].flipAroundX(), pieces)
		occupiedSlots = occupySlots(piece1, sortedPieces, pieces)
	}
	return combinePieces(occupiedSlots)
}

func combinePieces(slots [][]slot) (result []string) {
	width := len(slots)
	for y := 0; y < width; y++ {
		for i := 0; i < len(slots[0][0].piece.inner); i++ {
			row := ""
			for x := 0; x < width; x++ {
				piece := slots[y][x].piece
				row += piece.inner[i]
			}
			result = append(result, row)
		}
	}
	return
}

func rotateTopLeftPiece(p piece, pieces []piece) piece {
	result := p
	indices := result.getMatchingEdges(pieces)
	for indices[0] != 1 || indices[1] != 2 {
		result = result.rotate90()
		indices = result.getMatchingEdges(pieces)
	}
	return result
}

func occupySlots(startingPiece piece, sortedPieces map[int][]piece, pieces []piece) [][]slot {
	width := int(math.Sqrt(float64(len(pieces))))
	slots := make([][]slot, width)
	for y := range slots {
		slots[y] = make([]slot, width)
	}
	for y := 0; y < width; y++ {
		for x := 0; x < width; x++ {
			slots[y][x] = slot{x: x, y: y}
		}
	}
	slots[0][0].occupyWith(startingPiece)

	remainingPieces := make(map[int][]piece)
	for k, v := range sortedPieces {
		newV := make([]piece, len(v))
		copy(newV, v)
		remainingPieces[k] = newV
	}
	remainingPieces[2] = remove(remainingPieces[2], 0)
	for y := 0; y < width; y++ {
		for x := 0; x < width; x++ {
			if x == 0 && y == 0 {
				continue
			}
			slot := slots[y][x]
			connectedEdges := getNumberOfConnectedEdges(x, y, width)
			options := remainingPieces[connectedEdges]
			for i, option := range options {
				accepts, orientatedOption := slot.accepts(option, slots)
				if accepts {
					slots[y][x].occupyWith(orientatedOption)
					remainingPieces[connectedEdges] = remove(remainingPieces[connectedEdges], i)
					break
				}
			}
		}
	}
	return slots
}

func getNumberOfConnectedEdges(x, y, width int) int {
	if (y == 0 && x == width-1) || (x == 0 && y == width-1) || (x == width-1 && y == width-1) {
		return 2
	} else if y == 0 || x == 0 || x == width-1 || y == width-1 {
		return 3
	}
	return 4
}

func areAllOccupied(slots [][]slot) bool {
	width := len(slots)
	for x := 0; x < width; x++ {
		for y := 0; y < width; y++ {
			slot := slots[x][y]
			if !slot.isOccupied {
				return false
			}
		}
	}
	return true
}

type position struct {
	x int
	y int
}

func markSeaMonsters(puzzle []string) []string {
	rotations := 0
	hsm := hasSeaMonsters(puzzle)
	for !hsm {
		if rotations < 3 {
			rotations++
			puzzle = rotate90(puzzle)
			hsm = hasSeaMonsters(puzzle)
			continue
		}
		rotations = 0
		puzzle = flipAroundX(rotate90(puzzle))
		hsm = hasSeaMonsters(puzzle)
	}

	result := make([]string, len(puzzle))
	copy(result, puzzle)
	earliestHeadPosition := 18
	latestHeadPosition := len(puzzle[0]) - 2
	for i := 0; i < len(result)-1; i++ {
		for j := earliestHeadPosition; j <= latestHeadPosition; j++ {
			seaMonster := getSeaMonster(i, j)
			if checkSeaMonster(result, seaMonster) {
				result = replaceSeaMonster(result, seaMonster)
			}
		}
	}
	return result
}

func hasSeaMonsters(puzzle []string) bool {
	earliestHeadPosition := 18
	latestHeadPosition := len(puzzle[0]) - 2
	for i := 0; i < len(puzzle)-1; i++ {
		for j := earliestHeadPosition; j <= latestHeadPosition; j++ {
			seaMonster := getSeaMonster(i, j)
			if checkSeaMonster(puzzle, seaMonster) {
				return true
			}
		}
	}
	return false
}

func getSeaMonster(i, j int) []position {
	return []position{
		{x: i, y: j},
		{x: i + 1, y: j + 1},
		{x: i + 1, y: j},
		{x: i + 1, y: j - 1},
		{x: i + 1, y: j - 6},
		{x: i + 1, y: j - 7},
		{x: i + 1, y: j - 12},
		{x: i + 1, y: j - 13},
		{x: i + 1, y: j - 18},
		{x: i + 2, y: j - 17},
		{x: i + 2, y: j - 14},
		{x: i + 2, y: j - 11},
		{x: i + 2, y: j - 8},
		{x: i + 2, y: j - 5},
		{x: i + 2, y: j - 2},
	}
}

func checkSeaMonster(puzzle []string, seaMonster []position) bool {
	for _, position := range seaMonster {
		if string(puzzle[position.x][position.y]) != "#" {
			return false
		}
	}
	return true
}

func replaceSeaMonster(puzzle []string, seaMonster []position) []string {
	result := make([]string, len(puzzle))
	copy(result, puzzle)

	for _, position := range seaMonster {
		row := result[position.x]
		result[position.x] = row[:position.y] + "0" + row[position.y+1:]
	}
	return result
}

type slot struct {
	isOccupied bool
	piece      piece
	x          int
	y          int
}

type piece struct {
	id    int
	edges [4]edge
	inner []string
}

type edge string

func (p piece) isCornerPiece(pieces []piece) bool {
	return len(p.getMatchingEdges(pieces)) == 2
}

func (p piece) getMatchingEdge(p2 piece) (int, error) {
	for i, e := range p.edges {
		for _, e2 := range p2.edges {
			if e == e2 || e == reverse(e2) {
				return i, nil
			}
		}
	}
	return 0, errors.New("No matching edge found")
}

func (p piece) rotate90() piece {
	edges := [4]edge{
		p.edges[3],
		p.edges[0],
		p.edges[1],
		p.edges[2],
	}

	inner := rotate90(p.inner)

	return piece{id: p.id, edges: edges, inner: inner}
}

func rotate90(s []string) []string {
	result := make([]string, len(s))
	for i := range s {
		for _, row := range s {
			result[i] = string(row[i]) + result[i]
		}
	}
	return result
}

func (p piece) flipAroundX() piece {
	edges := [4]edge{
		reverse(p.edges[2]),
		reverse(p.edges[1]),
		reverse(p.edges[0]),
		reverse(p.edges[3]),
	}

	inner := flipAroundX(p.inner)

	return piece{id: p.id, edges: edges, inner: inner}
}

func flipAroundX(s []string) []string {
	return reverseSlice(s)
}

func (p piece) getMatchingEdges(pieces []piece) []int {
	result := []int{}
	for _, piece := range pieces {
		if piece.id == p.id {
			continue
		}
		index, err := p.getMatchingEdge(piece)
		if err == nil && !contains(result, index) {
			result = append(result, index)
		}
	}
	sort.Ints(result)
	return result
}

func (s *slot) occupyWith(p piece) {
	s.piece = p
	s.isOccupied = true
}

func (s *slot) accepts(p piece, slots [][]slot) (bool, piece) {
	result := p
	occupiedAdjacents := []slot{}
	if s.x != 0 {
		occupiedAdjacents = append(occupiedAdjacents, slots[s.y][s.x-1])
	}
	if s.y != 0 {
		occupiedAdjacents = append(occupiedAdjacents, slots[s.y-1][s.x])
	}

	accepts := false
	for i, adjacent := range occupiedAdjacents {
		if i == 0 {
			index, err := result.getMatchingEdge(adjacent.piece)
			if err == nil {
				if adjacent.x != s.x {
					for index != 3 {
						result = result.rotate90()
						index, _ = result.getMatchingEdge(adjacent.piece)
					}
					if result.edges[3] == adjacent.piece.edges[1] {
						result = result.flipAroundX()
					}
				} else {
					for index != 0 {
						result = result.rotate90()
						index, _ = result.getMatchingEdge(adjacent.piece)
					}
					if result.edges[0] == adjacent.piece.edges[2] {
						result = result.flipAroundX().rotate90().rotate90()
					}
				}
				accepts = true
				continue
			}
		} else {
			index, err := result.getMatchingEdge(adjacent.piece)
			accepts = accepts && err == nil && index == 0
		}
	}
	return accepts, result
}

func reverse(e edge) edge {
	runes := []rune(e)
	for i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {
		runes[i], runes[j] = runes[j], runes[i]
	}
	return edge(runes)
}

func contains(s []int, e int) bool {
	for _, a := range s {
		if a == e {
			return true
		}
	}
	return false
}

func remove(s []piece, i int) []piece {
	result := make([]piece, len(s))
	copy(result, s)
	result[i] = result[len(s)-1]
	return result[:len(s)-1]
}

func reverseSlice(s []string) []string {
	result := make([]string, len(s))
	copy(result, s)
	for i, j := 0, len(s)-1; i < j; i, j = i+1, j-1 {
		result[i], result[j] = result[j], result[i]
	}
	return result
}

const DemoInput = `Tile 2311:
..##.#..#.
##..#.....
#...##..#.
####.#...#
##.##.###.
##...#.###
.#.#.#..##
..#....#..
###...#.#.
..###..###

Tile 1951:
#.##...##.
#.####...#
.....#..##
#...######
.##.#....#
.###.#####
###.##.##.
.###....#.
..#.#..#.#
#...##.#..

Tile 1171:
####...##.
#..##.#..#
##.#..#.#.
.###.####.
..###.####
.##....##.
.#...####.
#.##.####.
####..#...
.....##...

Tile 1427:
###.##.#..
.#..#.##..
.#.##.#..#
#.#.#.##.#
....#...##
...##..##.
...#.#####
.#.####.#.
..#..###.#
..##.#..#.

Tile 1489:
##.#.#....
..##...#..
.##..##...
..#...#...
#####...#.
#..#.#.#.#
...#.#.#..
##.#...##.
..##.##.##
###.##.#..

Tile 2473:
#....####.
#..#.##...
#.##..#...
######.#.#
.#...#.#.#
.#########
.###.#..#.
########.#
##...##.#.
..###.#.#.

Tile 2971:
..#.#....#
#...###...
#.#.###...
##.##..#..
.#####..##
.#..####.#
#..#.#..#.
..####.###
..#.#.###.
...#.#.#.#

Tile 2729:
...#.#.#.#
####.#....
..#.#.....
....#..#.#
.##..##.#.
.#.####...
####.#.#..
##.####...
##..#.##..
#.##...##.

Tile 3079:
#.#.#####.
.#..######
..#.......
######....
####.#..#.
.#...#.##.
#.#####.##
..#.###...
..#.......
..#.###...`

const RawInput = `Tile 1321:
.....#.##.
....##.###
#..##.....
.........#
#.#...#...
##..#....#
#..#.#....
......#.##
...#......
.###.#####

Tile 1327:
.#.###.##.
###..#...#
##.....#.#
#..#..##..
##..#..#..
.#.##...#.
#..#.#....
##.#......
...#......
.###.#..#.

Tile 3929:
######..##
....#.....
#.....##.#
#..#....##
#........#
....##....
.#...#..##
#...#...##
#.#.#...##
#.#.#.#.##

Tile 1699:
##.##..##.
##....###.
.#.......#
...###.##.
###.#..#.#
##.###.###
.#...#....
......##..
##........
..##...###

Tile 3877:
###.......
#.#.....##
##...#.###
....##..##
##.....##.
.....###.#
#..##..#.#
..........
#....#.#.#
.#.##....#

Tile 1289:
####.#####
........#.
..#.....##
#.......#.
...###...#
..#.....##
..#......#
##....###.
###....#..
......#..#

Tile 2833:
..##.#.###
.##.#.....
.....#.###
#..##.....
#........#
.#.......#
.##...###.
..##....#.
#....###.#
#.###.#...

Tile 2707:
.....####.
....#..##.
....#.#..#
...#.....#
##.##..#..
.##...#..#
.#....#...
#....##...
##...#.#..
#.#...###.

Tile 1303:
#.##.###.#
..........
#.....##..
#........#
...#.#....
..#......#
#.#..#..##
#.#.......
#.....###.
.##....###

Tile 3779:
##.##...#.
#####....#
###..#....
......#..#
....#...#.
...#.##.#.
#..#..##.#
..#..#....
..#.#....#
#.##.#.#.#

Tile 1637:
..#.######
.........#
......#.##
..#.......
#.#......#
#......#..
#........#
#...#...#.
......#..#
###..###..

Tile 3881:
...#.##...
......#.#.
.........#
##..#.#..#
#......#..
#........#
#.....#...
....#..###
#...#..#.#
.#.###..##

Tile 1753:
##.#...###
#.......#.
#.#......#
.........#
..#..#####
..#...###.
..#...#...
.........#
.........#
##.#.#####

Tile 2311:
##..#####.
#.......#.
#.#....#..
.........#
..#..#.#.#
#..##....#
##....#.##
...#....##
.......##.
..##.#...#

Tile 3677:
..#####...
.#..##..#.
#........#
#.....####
###....#.#
.#..#.....
##..#.....
#........#
..........
....#.....

Tile 3371:
#...#.####
..........
#...#....#
..#.......
....#..#..
..........
#.#.####.#
..#....###
..##.....#
#...#..###

Tile 1093:
...#....##
##.......#
###.#...#.
..#.#.....
.......#..
##.......#
..#.##....
##....#..#
##.......#
.#...#....

Tile 1193:
.###....#.
..#.#.....
..#.##.##.
.###...#.#
#.....#...
...#.###.#
.....#..#.
#....##.##
.#.#.#....
####...###

Tile 2699:
....#.####
......#..#
...#...#.#
#.....#.##
#....#...#
#....#...#
#..##.....
.#...#..##
..#..#.#.#
#.......##

Tile 2069:
.#...#..##
..#..#...#
....##....
..#.......
.......#..
##.##.##..
.#........
........##
#..##..###
.###..#..#

Tile 3739:
.##.####.#
#...#....#
#....#....
.#....##..
...##...##
....##.#.#
.#.....#..
#......#.#
...#...#.#
######.#.#

Tile 1871:
#.####..#.
.###.#....
.........#
#...#....#
.......#.#
#......##.
#......#.#
.##.#..#.#
.....##.##
##.#.##...

Tile 1483:
..##..####
#.#.......
#...#....#
#####..#..
#....#...#
#.......##
...#.....#
####......
#.###..#..
..####.###

Tile 3343:
.##.#.##..
#.#..##.#.
#..#.##...
.#...##..#
......#..#
##..##....
##.#......
##....#...
#....#...#
###...#...

Tile 1553:
#...#....#
#..#.#.#..
#....###..
##....#...
...##...#.
....#....#
#.#..#...#
.......##.
.#.......#
#.####...#

Tile 2393:
#..###....
##.#..##..
#...##....
#.........
.#.....#.#
....#....#
.##.#.#...
##...#...#
.###..#.##
...###..##

Tile 3061:
##.#.....#
#....#.#..
........##
##...#...#
#.........
..#..#....
##.#.#...#
##.#......
.###.#...#
.####..##.

Tile 3797:
#.#..#..#.
..##..#...
..#...##.#
#...#...#.
###......#
...#.###..
#...#....#
....#.#.##
........##
......#...

Tile 2593:
..##.###.#
#..##.....
#.#..#..##
#.#...#..#
........##
......##.#
#.#.#.#.#.
..##..#...
...#.#....
###..#.###

Tile 1907:
.##.#..###
####.##.##
..#....#..
..####...#
...##.....
#.....#.#.
....#.###.
...#......
#...#....#
#######...

Tile 2557:
#.###..#.#
#.....#..#
.#........
#...#.##..
#......#..
##......#.
#..##....#
#......#..
#...###.#.
#.##......

Tile 1499:
####...#.#
##..#.##..
#.#..#....
.#....##.#
....#..##.
##........
#.#.#.....
.##..#...#
..##.....#
##...#####

Tile 1409:
.#...###.#
..##.#...#
#.........
...##.....
.#....#...
.##.....#.
..##....#.
#..#...#.#
#.......##
.#.#....##

Tile 2801:
.#.#.##...
#.#.......
#....#...#
#.....#..#
.##.##.###
.#.##.###.
##.##.##.#
.#...#....
.#.#.##..#
.###.#.##.

Tile 2971:
.......#.#
..##..#...
..##..##.#
..###.####
....#..#..
#..#....#.
##....#..#
##..#.....
.#..#.#.##
.##...#.##

Tile 2789:
###.#.#...
#..#....##
##...##.#.
.....###..
...##.....
...##....#
....##.#.#
#..####...
####....##
..#.#...##

Tile 1249:
#..##.###.
..#....#..
......#..#
.....#...#
#.#...####
#.#..#..##
...#.#..#.
#.##...#.#
##..#....#
..###.###.

Tile 2179:
.#.#.##.#.
#.##.###.#
#.#.......
.....#.#.#
#.....#.#.
....#....#
...#....##
...#..###.
.#........
######.#..

Tile 2879:
......####
###..#...#
.#.#..##..
..###...##
....#.##..
....#.#...
.....#.#.#
....####.#
..#...#..#
.##.###.#.

Tile 3463:
...#.###..
..#.####.#
..###.....
...##...#.
#.##..#.#.
..##.##...
.#.#.....#
.##..#...#
......##.#
.#.##...#.

Tile 1901:
.#.#....##
#....#...#
.###..#.##
#...#.##..
#..#.#....
##..##...#
..#.......
.........#
#......#.#
#..#....##

Tile 3307:
......#...
#........#
..#.#..#.#
....###.#.
#...#.#...
.#####....
..#......#
.#........
#..#.#.#.#
####.###..

Tile 2719:
.####..##.
...#......
#.........
#..##.#.##
#...#.#..#
#.....#.#.
..#....##.
#.........
#.#..##..#
...##..#..

Tile 1439:
.###.#....
#....##...
...#......
...#......
#.........
..........
.#......##
........##
#...##..#.
.#.###.#..

Tile 2917:
##.#.#..##
##........
.......#.#
...##....#
##..##....
.###...#..
..###.#...
#.#..#..##
..........
##........

Tile 1039:
.##.....#.
#.........
#..#..#..#
....##.#..
##....#..#
#.#.......
....#.....
#..#....#.
#...#....#
##...#####

Tile 3251:
...###..##
####......
...###.#.#
....#.####
#####.##.#
.....##..#
..#..#....
#.......##
#....#.##.
#.#.##..##

Tile 1451:
..##...##.
..##...###
..........
#.........
#.###...#.
##.#......
...#....##
#.##......
..#.......
....###.#.

Tile 2111:
...#..#.##
#....##.##
#...##.#.#
#...##....
#...#.#.#.
.#..#....#
#.#.....##
......##..
..##.#..##
.######.##

Tile 2683:
.#####.#.#
.#..##....
#.#......#
....#..#.#
...#.####.
.#........
...#......
#..#..#..#
#.........
##..######

Tile 3517:
.###.#.#..
#.......##
#........#
#....#...#
#.#......#
#....#....
#......#.#
#.........
.#.#.###..
.....#.##.

Tile 3659:
.###..####
.#........
###..#...#
.....#..##
....#.#..#
#....###..
#.....#...
#.##.#...#
#.#...###.
#..#.####.

Tile 2131:
.##..#.#..
#.#.....##
####....#.
.#........
...#..#..#
##..#..###
#....##.##
........##
#...###...
....##.##.

Tile 1873:
#####..#.#
.......#.#
###......#
#.#.#..#.#
.........#
..#....#.#
..........
#...#.##.#
#....#.#.#
#####..###

Tile 3331:
.#######..
#.#...##..
##..##.##.
.....##.#.
..#......#
.....#...#
#.#...#..#
.....#....
##......##
.......#..

Tile 2467:
.#.#.#..#.
......#..#
......#...
.#...###.#
.#..#....#
..........
#.....##..
.#..#.#..#
##....##..
....#.#.#.

Tile 2837:
...#..##.#
.....#..##
...#.#.###
#..#....#.
#.#.#.....
.......#.#
##..#....#
#....#.#..
#.......##
.###..####

Tile 3089:
######.#.#
#..#....##
...#..##.#
..#.###...
....###...
....#..#..
.......##.
....#..#..
..##...#.#
.#.#.#..#.

Tile 2381:
..##.#..#.
.#.#..#..#
..#.......
#.##.#.##.
#..#......
.#....#..#
....#..#.#
.#.....###
#...#....#
#####.##..

Tile 2083:
#.....#.#.
.#......#.
.##..#..#.
.#...#.#..
...#....#.
#......#.#
.#.....##.
.#....###.
.##.....##
.#.#..#...

Tile 1277:
....##.#.#
...###.##.
#...##.#.#
....##..#.
...#.....#
#....#.#..
#...#...##
#..#......
....#....#
##.######.

Tile 2851:
###...#...
#....#..##
..#...#.#.
.#.##.#...
#.##.....#
#...#.#..#
###..#.#.#
#.####.#..
.....#..##
##.#..#.#.

Tile 1867:
.#.#####..
##......#.
#.......##
#.......#.
#..##.....
..........
#.........
##...#...#
...#..##.#
...####.#.

Tile 3889:
.#.#.#...#
#...#.....
#......#.#
#.#.....##
#.....#...
#.###.....
#........#
.....#....
..........
.##...####

Tile 3943:
#..###.###
#..#....#.
.....#..##
###..#..#.
.#.##.###.
##....#.#.
....#.....
.#....#...
#.....#..#
#.#.###.##

Tile 3613:
###.#...##
#....##...
..#...#.#.
#...#...##
#.##......
..#.......
#..#..#.#.
#.........
##.#...#..
#.#...###.

Tile 1471:
...#.#....
.........#
#.........
#....##.##
.#...##...
..#.#..#.#
.....#...#
#...#..#.#
##....#...
#.####....

Tile 1627:
##..##.###
#..#.....#
.##.##..#.
.#.....#..
...#.###..
#.#....#.#
.###...###
.#####.#..
###......#
..#.#.#.#.

Tile 3581:
#.#..##...
..........
..........
....##..#.
#........#
#...##....
....#...#.
...###....
..##......
.#..###.##

Tile 2677:
.#.###...#
.#.##....#
##.##.....
#......###
#........#
......#.##
.#........
.##....#.#
.##....##.
...######.

Tile 3253:
.#..#..#.#
..#......#
..###...##
#.........
.##....#..
...##....#
#..#.....#
..#.......
#....#.##.
#.##.##.#.

Tile 2027:
.#.#......
..#..#..#.
#.#......#
.....####.
..........
.#.#......
#.#.....##
...#.#.#.#
.#........
##...#..##

Tile 1801:
#.#.#.##..
#......#.#
.#...#....
#..#.##..#
#.###.##.#
#.#..#.##.
....##..#.
...##....#
.......#.#
....#..###

Tile 2377:
###.##...#
.###.#..##
...#..##.#
#...##....
...#.....#
##........
.#.#..#..#
.......#.#
#........#
....##.#.#

Tile 3449:
###.##..#.
.##.#.##..
..##..#.#.
.#..#..#..
#.......#.
.#..#....#
#...#..#.#
...###...#
#.##.#.###
#..###..#.

Tile 1721:
..##..##.#
........##
###...#..#
####...#..
.##...###.
.#.#..#..#
.#.......#
#....##.##
#.#.##...#
..##..#..#

Tile 1787:
##.#.##...
#.....#...
##..##....
.#..#....#
#......###
......#...
#.........
...#...###
.#...#....
.#.###..#.

Tile 1777:
.....#.#..
.#.#.....#
...#..#...
#####.####
...##.#.#.
###.#....#
#.#.#...##
#...###...
.#..#...##
.#.##.##..

Tile 3461:
.....###.#
#.#.......
#...#....#
#......#.#
#....####.
##....#...
....###.##
#.#.....##
#........#
.##.....#.

Tile 2539:
.##.###..#
#.#...#...
#.......#.
.......#.#
#.......##
......##..
#........#
.##.#..###
#.#....###
##.##.##..

Tile 1823:
.#.##...##
####...#.#
#.#..#...#
.#...#....
#.#.......
..##.#....
...#......
#..#...##.
#.#.#....#
.##..###..

Tile 1697:
#.###.###.
.#.#...#..
#.#....#.#
.###..##..
..#..##.##
#......#.#
#.#####...
#..###.#..
##.....###
.####.#.##

Tile 1783:
#.##..##..
##...#..##
.#.....###
...#..#.##
..#.......
.##....#.#
..#..#..##
.#.......#
...#..#..#
###.#.####

Tile 1367:
##.#.#.###
...#.#...#
....##...#
......#...
......##..
#....###.#
....#.....
#.#.#..#.#
#....#....
##..###..#

Tile 3671:
....#...##
#...#..#..
.#........
..........
#.#...#...
#...#.#..#
...#.##..#
#.......#.
...#...#.#
#..#....##

Tile 1373:
.#..##.#..
.........#
.#.#..#.#.
..........
#...##....
.........#
#.#.##...#
.#.##....#
##........
...#######

Tile 3571:
##..##.#..
.......#.#
#....#.#.#
#.#.#..#..
#...#.###.
#..#.#####
##..####..
.........#
.....#...#
.##.#...##

Tile 1949:
#.##..#..#
...##.#...
##.....#..
#......#.#
#.......##
##.##....#
....#.....
#.#.......
##..##...#
###.###...

Tile 1759:
..##.##.#.
##.#....#.
#.#.##....
#........#
..#..#..#.
.#..####.#
#.......#.
......#..#
...#....#.
.#.#.#####

Tile 3407:
#..#..##..
#...##....
.##.#####.
####..#.##
#.#.##...#
#...#..#..
.#........
#.##....##
#..#...#.#
##.##.###.

Tile 3557:
#.....####
.........#
###......#
#.##..#..#
#.....#.##
#..#....##
.##....#..
#......#.#
.....#..##
#.#..##...

Tile 2423:
#.##..#...
......#.#.
##.#..####
#...#.....
...###...#
#.........
#...#....#
.......##.
###....##.
.##.##.#..

Tile 2777:
.#.#####..
#...#.....
##....#..#
#......##.
.#.#..#..#
..#.#...##
#....##...
..........
#...#.####
#..#...#..

Tile 2309:
##.###..##
.#.......#
...#..#.##
#....###.#
.....#...#
#.###...#.
.#.....#.#
..#..#..#.
#.#..#.#.#
.####.#..#

Tile 2417:
#.####.##.
##....#...
#.#.##....
#...#.####
.###....##
#.#..#...#
#.#....###
#.#......#
......#...
...#..##..

Tile 1619:
..#.#..###
#....##..#
##..#....#
#..##...##
#.#.#..##.
##..##..##
#..#.#....
..#...##..
#.......##
.#..###.##

Tile 2797:
#.##...#.#
#...#....#
..##.#.#.#
#.........
.#....#...
.#.#..##..
#..##.#..#
#....#..#.
.#...#...#
##.#.#.###

Tile 1663:
#.####..##
.....##..#
..#...#..#
..#.###.#.
##.#.#####
#..#......
#....#....
.##.....##
..........
.##..##..#

Tile 2749:
....#..#.#
#...#..#..
..#......#
...##.#...
.##.#....#
#.#..#....
#...#....#
..#...#.##
..##....##
#..#####..

Tile 2389:
###.####..
#.#......#
..#..#..##
.#...###..
.........#
#.......##
..#.##....
#.....#..#
##.......#
##.#..#..#

Tile 2473:
.##....#.#
..........
#####.##.#
#....###..
#.........
..##..#.##
.#..#.....
#...#.#...
.......#.#
.#.#..#..#

Tile 1021:
.#.####..#
.....#.#.#
#.......#.
##.#.#...#
.#.#...#..
.#...#...#
..#..##...
....#....#
.###..##..
##.###..##

Tile 2213:
###..##.#.
##.###..##
#....#...#
#..##.#...
......#.#.
#........#
#..###....
.###.###.#
##...#....
######....

Tile 3821:
.###.##.#.
#....#...#
##.#.#...#
..#...#..#
...##.....
#..###..#.
.#....#...
....#.#..#
........##
#.#.##.#..

Tile 3793:
##...#..##
#....#....
##.#.#...#
#.##...#..
.##..#..##
.#..##...#
...#.....#
.....#..#.
..##...#.#
..#.##.#.#

Tile 2099:
.#....#.##
...##..#..
#........#
........##
...##.....
#..##.#...
#..##..#..
.##.##....
#.##...#..
..###..##.

Tile 2663:
###.#.##.#
.........#
...###....
####.#.#.#
##.#..#.##
#.....#.##
.#.#....#.
.#.#....#.
#....##.#.
###.##..#.

Tile 1607:
##.#...#.#
#.##......
##.#.....#
###......#
..##...#..
..##...##.
...#......
#.#.......
..#.#...##
....#####.

Tile 2687:
.#...##.#.
#........#
....#.##..
......##.#
......#...
#...#.##..
#.#.####.#
...##.....
..#.......
###.###..#

Tile 2531:
.#.#..#...
##.#....#.
##.##...##
.#..#.##.#
##........
##......##
#......###
#....#...#
##......#.
#.#..##..#

Tile 1999:
#.....####
#.###....#
#.##...#..
..####..##
#.#.......
##..#.#..#
.##.#..###
..##.#....
....##.###
.....##.##

Tile 2671:
.##..##.#.
..#...##..
#.#...##..
##.#..#..#
..........
#......#.#
.....#....
#.#....#.#
.......##.
#....###..

Tile 2549:
#...###.#.
...##.....
.......##.
.##.....##
#....##.##
.#.#....##
.#......#.
.#.#...#.#
###.......
..#.#.#..#

Tile 3593:
##...#...#
#....#..#.
#.....#...
.#.......#
##....#.#.
#..##..##.
#.....#...
.........#
..#......#
..##.#....

Tile 1789:
.##.......
#...#.....
.....#..##
..#..#....
.#....#.##
...#.....#
#.#..#...#
.##.#...#.
#.##.....#
....#..##.

Tile 2341:
#.....##..
#..##.#.#.
#.#....#.#
......#...
###.....#.
#...#...#.
.....#.#.#
..##...#.#
........#.
#..####...

Tile 2903:
####..#...
##.......#
#.........
.##.......
.#.....#.#
###.#..#.#
..##.##..#
........##
.#.....#..
#.#..####.

Tile 1091:
.#####..##
.#...#.#..
...####.#.
......#..#
#..#.###.#
..........
.....#...#
.#........
#.#..#....
.#.#.#.#..

Tile 1481:
#.#.#.##.#
..#...#.##
..#...##.#
..##.#..##
##..#####.
###..#.#.#
#....#....
........#.
.#.#....#.
.##..###.#

Tile 1433:
######....
#...#..##.
..........
#........#
.##.#..#..
..#..##.#.
#...#...##
.#......##
...###...#
#..##..###

Tile 3967:
#.####.#..
...#..##.#
#..#.#..##
.#..##.###
#...###..#
#.#...#.##
#.#...#.#.
..#..#.#.#
..#..#....
.##...#.##

Tile 2153:
..#####..#
#..#.#....
#........#
#......#..
##........
..........
#......##.
..........
##..#.#..#
.##..#...#

Tile 3299:
....####..
..#..#....
#...##.#.#
##..##...#
##..#.#..#
..#.#.....
...#.#....
#.....#...
##....#.##
#...##.#..

Tile 1601:
..###.##..
#....#..#.
.#.#......
..#....##.
#...##.#..
.#..####.#
.#...###..
#.......##
#...#.....
.#....##..

Tile 2003:
###...##.#
#.....#...
.##....#..
#.####..##
#.........
##.#......
......####
##..#..##.
##.#......
##....##..

Tile 1571:
.#....##..
#.......##
#...#....#
.#..#.....
##..#....#
.....###..
#.........
....#..#..
...#......
.......###

Tile 2909:
..##..#...
##.#.#....
....###...
...##.#...
##..#.#.#.
.#.#..#...
..#..#.##.
##.......#
#...##..#.
.#..#.#...

Tile 2113:
#####..#..
.#...##...
......####
.#...#....
...##.#.#.
.#....####
...##..#..
#..#.#.#.#
#.....#..#
###..#.#.#

Tile 2503:
.#..#.#...
#..##..#..
##..#.#...
.#.#.##..#
#.#...##..
.#........
#......#..
.####..##.
.##...#..#
.##..##...

Tile 1231:
.#.#..##.#
.....#..##
#..#.##...
####....#.
...###.#..
#...#.#.#.
....##.#.#
#.##......
###......#
.#....##.#

Tile 1237:
#.#..###.#
#.#..#..##
#.....#..#
.......##.
#....#.##.
.#...###.#
.###.#.##.
##...#...#
###.......
.#...#.#..

Tile 2729:
#.#.##..##
...#####..
...#.##...
#..#.#..#.
#.....#..#
.#.......#
.....#.#..
##....##..
##....##..
...###....

Tile 1609:
.###.##...
.##..##...
#......#.#
.........#
..##...#.#
##..#.#...
..##....#.
#..#..#...
#.........
###.#.##.#

Tile 2819:
..####....
...#..#..#
..#.##....
...#.....#
...#...#.#
#.....#...
#.......#.
..........
#.#.......
..##....##

Tile 1621:
##..#.####
.#...#####
.....##...
..#.....##
...#...#.#
...#..##.#
#.#.#.#.##
.#.#.##..#
#...#....#
.##.#..###

Tile 1987:
#.#..##..#
##..##..#.
...##..#..
##....##.#
.....#....
#.....##..
##..#....#
..#......#
###.#..#.#
#..##.#.##

Tile 1951:
.#..#..#..
##.....###
#.........
#........#
....#.....
..##..###.
.##.#..##.
#.#.......
##..#.#..#
.#........

Tile 2137:
..#...#.#.
#......#.#
.......#.#
...#.....#
...##.##.#
...#......
...###....
#......#..
.#...##..#
.###.#....

Tile 2063:
#....#.###
......#.#.
###.##....
.#.##.#.#.
........##
.....####.
.###.#...#
..#####...
.#..##.#.#
.##...####

Tile 1213:
#......##.
.#.##.#..#
#.#.#.#.##
#.#..#.###
##.#.#...#
.###..#..#
.#.......#
##..#.....
#####.##.#
...###....

Tile 2543:
###.#..#.#
#....#.#.#
##..#....#
#..#......
##.###.#..
.#..#....#
.....#.#..
#..#...#..
#.......##
.#####....

Tile 2857:
.###.###.#
#..#.#....
...##...#.
.#..#..###
...#...#..
#.#....#..
..#.#.#.#.
#..##....#
...#..#...
.##......#

Tile 1153:
...##.#...
....#....#
#.......##
###.....##
..#....#..
#..##....#
.#.....##.
.##.......
#..#.#..##
......##..

Tile 1217:
..##.#...#
#.##.##..#
##....#.#.
..##.#.###
###.......
#........#
....##...#
#...#.#..#
...#.#..##
....##.##.`
